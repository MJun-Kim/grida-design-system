{"version":3,"file":"InputNumber.stories-73b6a51d.js","sources":["../../src/components/InputNumber/InputNumber.tsx"],"sourcesContent":["import './inputNumber.css'\n\nimport React, { useEffect, useRef, useState } from 'react'\n\n/**\n * InputNumber 컴포넌트의 props입니다.\n */\nexport interface InputNumberProps {\n  /**\n   * 해당 컴포넌트가 그려질 때 최초로 포커스를 획득하는지 여부로 사용가능합니다.\n   * * 기본 값은 false입니다.\n   */\n  autoFocus?: boolean\n  /**\n   * Input Number 비활성화 속성입니다.\n   * * 기본 값은 false입니다.\n   */\n  disabled?: boolean\n  /**\n   * Input Number에 범위를 지정할 수 있습니다.\n   * 기본값은 false입니다.\n   */\n  // range?: boolean\n  /**\n   * Input Number의 값입니다.\n   * range가 false이면 number를 사용합니다.\n   * range가 true이면 [number, number]를 사용합니다.\n   * * 기본 값은 0 | [0, 0]입니다.\n   */\n  value?: number\n  /**\n   * Input Number의 기본값입니다.\n   * range가 false이면 number를 사용합니다.\n   * range가 true이면 [number, number]를 사용합니다.\n   * * 기본 값은 0 | [0, 0]입니다.\n   */\n  defaultValue?: number\n  /**\n   * Input Number의 크기를 결정하는 속성입니다.\n   * 기본 small입니다.\n   */\n  size?: 'small' | 'medium' | 'large'\n  /**\n   * Input Number가 값을 단계적으로 적용할 수 있는 세분성입니다.\n   * 0보다 커야 하며 (최대 - 최소)로 나눠야 합니다.\n   * 기본 값은 1입니다.\n   */\n  step?: number\n  /**\n   * Input Number가 슬라이드할 수 있는 최대값 설정하는 속성입니다.\n   * 최대값은 Number.MAX_SAFE_INTEGER입니다.\n   */\n  max?: number\n  /**\n   * Input Number가 슬라이드할 수 있는 최소값 설정하는 속성입니다.\n   * 최소값은 Number.MAX_SAFE_INTEGER입니다.\n   */\n  min?: number\n  /**\n   * 사용자가 Input Number 값을 변경할 때 호출되는 콜백 함수입니다.\n   */\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\n/**\n * 마우스 또는 키보드로 특정 범위 내의 숫자를 입력합니다.\n *\n * ## 언제 사용하나요?\n * - 숫자 값을 제공해야 하는 경우 사용합니다.\n *\n * ```js\n * import { InputNumber } from \"grida\";\n * ```\n */\nexport default function InputNumber({\n  autoFocus = false,\n  disabled = false,\n  // range = false,\n  value,\n  defaultValue = 0,\n  size = 'small',\n  step = 1,\n  max = Number.MAX_SAFE_INTEGER,\n  min = Number.MIN_SAFE_INTEGER,\n  onChange,\n}: InputNumberProps) {\n  const ref = useRef<HTMLInputElement>(null)\n  const plusRef = useRef<HTMLInputElement>(null)\n  const [valueState, setValueState] = useState<number>(value ? value : defaultValue)\n  const [isDemical, setIsDemical] = useState<boolean>(false)\n\n  useEffect(() => {\n    if (!step) return\n\n    const strValue = step.toString() // 숫자 값을 문자열로 변환\n    if (strValue.indexOf('.') !== -1) {\n      // 소수점이 있는지 여부를 확인setIsDemical\n      setIsDemical(true)\n    }\n  }, [step])\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const numValue = Number(e.target.value)\n    if (numValue > max) return\n    setValueState(Number(numValue))\n    onChange?.(e)\n  }\n\n  const handleButtonPlusClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault()\n    ref.current?.focus()\n    if (valueState >= max) return\n    setValueState((prev) => prev + step)\n  }\n\n  const handleButtonMinusClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault()\n    ref.current?.focus()\n    if (valueState <= min) return\n    setValueState((prev) => prev - step)\n  }\n\n  return (\n    <div\n      className={`input-number input-number-${size} ${disabled ? 'input-number-disabled' : null}`}\n    >\n      <input\n        ref={ref}\n        autoFocus={autoFocus}\n        type=\"number\"\n        value={isDemical ? valueState.toFixed(1) : valueState}\n        defaultValue={defaultValue}\n        min={min}\n        max={max}\n        step={step}\n        disabled={disabled}\n        onChange={handleChange}\n        className={`input-number-input`}\n      />\n      <div className=\"input-number-button\">\n        <div\n          ref={plusRef}\n          className={`input-number-button-plus ${\n            disabled ? 'input-number-button-plus-disabled' : null\n          } ${valueState === max ? 'input-number-button-plus-only-disabled' : null}`}\n          onClick={handleButtonPlusClick}\n        >\n          +\n        </div>\n        <div\n          className={`input-number-button-minus ${\n            disabled ? 'input-number-button-minus-disabled' : null\n          } ${valueState === min ? 'input-number-button-minus-only-disabled' : null}`}\n          onClick={handleButtonMinusClick}\n        >\n          -\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":["InputNumber","autoFocus","disabled","value","defaultValue","size","step","max","min","onChange","ref","useRef","plusRef","valueState","setValueState","useState","isDemical","setIsDemical","useEffect","handleChange","numValue","handleButtonPlusClick","_a","prev","handleButtonMinusClick","jsxs","jsx"],"mappings":"oIA0EA,SAAAA,EAAA,CAAoC,UAAAC,EAAA,GACtB,SAAAC,EAAA,GACD,MAAAC,EAEX,aAAAC,EAAA,EACe,KAAAC,EAAA,QACR,KAAAC,EAAA,EACA,IAAAC,EAAA,OAAA,iBACM,IAAAC,EAAA,OAAA,iBACA,SAAAC,CAEf,EAAA,CACE,MAAAC,EAAAC,SAAA,IAAA,EACAC,EAAAD,SAAA,IAAA,EACA,CAAAE,EAAAC,CAAA,EAAAC,EAAA,SAAAZ,GAAAC,CAAA,EACA,CAAAY,EAAAC,CAAA,EAAAF,EAAA,SAAA,EAAA,EAEAG,EAAAA,UAAA,IAAA,CACE,GAAA,CAAAZ,EAAW,OAEXA,EAAA,WACA,QAAA,GAAA,IAAA,IAEEW,EAAA,EAAA,CACF,EAAA,CAAAX,CAAA,CAAA,EAGF,MAAAa,EAAA,GAAA,CACE,MAAAC,EAAA,OAAA,EAAA,OAAA,KAAA,EACAA,EAAAb,IACAO,EAAA,OAAAM,CAAA,CAAA,EACAX,GAAA,MAAAA,EAAA,GAAY,EAGdY,EAAA,GAAA,OACE,EAAA,eAAA,GACAC,EAAAZ,EAAA,UAAA,MAAAY,EAAA,QACA,EAAAT,GAAAN,IACAO,EAAAS,GAAAA,EAAAjB,CAAA,CAAmC,EAGrCkB,EAAA,GAAA,OACE,EAAA,eAAA,GACAF,EAAAZ,EAAA,UAAA,MAAAY,EAAA,QACA,EAAAT,GAAAL,IACAM,EAAAS,GAAAA,EAAAjB,CAAA,CAAmC,EAGrC,OAAAmB,EACE,MAAC,CAAA,UAAA,6BAAApB,KAAAH,EAAA,wBAAA,OACsF,SAAA,CAErFwB,EAAA,QAAC,CAAA,IAAAhB,EACC,UAAAT,EACA,KAAA,SACK,MAAAe,EAAAH,EAAA,QAAA,CAAA,EAAAA,EACsC,aAAAT,EAC3C,IAAAI,EACA,IAAAD,EACA,KAAAD,EACA,SAAAJ,EACA,SAAAiB,EACU,UAAA,oBACC,CAAA,EACbM,EAAA,MAAA,CAAA,UAAA,sBAAA,SAAA,CAEEC,EAAA,MAAC,CAAA,IAAAd,EACM,UAAA,4BAAAV,EAAA,oCAAA,QAAAW,IAAAN,EAAA,yCAAA,OAG+D,QAAAc,EAC3D,SAAA,GACV,CAAA,EAEDK,EACA,MAAC,CAAA,UAAA,6BAAAxB,EAAA,qCAAA,QAAAW,IAAAL,EAAA,0CAAA,OAGsE,QAAAgB,EAC5D,SAAA,GACV,CAAA,CAED,EAAA,CACF,CAAA,CAAA,CAGN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}