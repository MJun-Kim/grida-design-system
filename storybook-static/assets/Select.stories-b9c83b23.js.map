{"version":3,"file":"Select.stories-b9c83b23.js","sources":["../../src/components/Select/Select.tsx"],"sourcesContent":["import './select.css'\n\nimport React from 'react'\n\ntype OptionType = {\n  label: string\n  value: string\n}\n\n/**\n * Select 컴포넌트의 props입니다.\n */\nexport interface SelectProps {\n  /**\n   * 해당 컴포넌트가 그려질 때 최초로 포커스를 획득하는지 여부로 사용가능합니다.\n   * 기본 값은 false입니다.\n   */\n  autoFocus?: boolean\n  /**\n   * 기본적으로 첫 번째 옵션을 활성화할지 여부입니다.\n   * 기본 값은 true입니다.\n   */\n  defaultActiveFirstOption: boolean\n  /**\n   * 초기 선택 옵션입니다.\n   */\n  defaultValue?: OptionType\n  /**\n   * 비활성화 여부 선택입니다.\n   * 기본값은 false입니다.\n   */\n  disabled?: boolean\n  /**\n   * 슬라이더의 값입니다.\n   * range가 false이면 number를 사용합니다.\n   * range가 true이면 [number, number]를 사용합니다.\n   * 기본 값은 0 | [0, 0]입니다.\n   */\n  options?: OptionType[]\n  /**\n   * select box의 상태를 설정할 수 있습니다.\n   * 기본 값은 default 입니다.\n   */\n  status?: 'default' | 'error' | 'warning'\n  /**\n   * select box의 크기를 정할 수 있습니다.\n   * 기본 값은 middle 입니다.\n   */\n  size?: 'small' | 'medium' | 'large'\n  /**\n   * select 값이 변경될 때마다 호출됩니다.\n   */\n  onChange?: (e: React.ChangeEvent<HTMLSelectElement>) => void\n}\n\n/**\n * 컴포넌트를 선택하여 옵션에서 값을 선택합니다.\n *\n * ## 언제 사용하나요?\n * - 선택 항목을 표시하는 드롭다운 메뉴 - 기본 select 태그 요소의 우아한 대안입니다.\n * - 비슷한 컴포넌트인 Radio는 총 옵션 수가 적을 때(5개 미만) 사용하는 것이 좋습니다.\n *\n * ```js\n * import { Select } from \"grida\";\n * ```\n */\nexport default function Select({\n  autoFocus = false,\n  defaultActiveFirstOption = true,\n  defaultValue,\n  disabled = false,\n  options,\n  status = 'default',\n  size = 'medium',\n  onChange,\n}: SelectProps) {\n  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    onChange?.(e)\n  }\n\n  return (\n    <select\n      className={`select select-${status} ${disabled ? 'select-disabled' : null} ${\n        size === 'large'\n          ? 'select-size-large'\n          : size === 'medium'\n          ? 'select-size-medium'\n          : 'select-size-small'\n      }`}\n      onChange={handleChange}\n      disabled={disabled}\n    >\n      {options &&\n        options.map((option, idx) => {\n          return (\n            <option key={idx} value={option.value}>\n              {option.label}\n            </option>\n          )\n        })}\n    </select>\n  )\n}\n"],"names":["Select","autoFocus","defaultActiveFirstOption","defaultValue","disabled","options","status","size","onChange","handleChange","e","jsx","option","idx"],"mappings":"iHAkEA,SAAAA,EAAA,CAA+B,UAAAC,EAAA,GACjB,yBAAAC,EAAA,GACe,aAAAC,EAC3B,SAAAC,EAAA,GACW,QAAAC,EACX,OAAAC,EAAA,UACS,KAAAC,EAAA,SACF,SAAAC,CAET,EAAA,CACE,MAAAC,EAAAC,GAAA,CACEF,GAAA,MAAAA,EAAAE,EAAY,EAGd,OAAAC,EACE,SAAC,CAAA,UAAA,iBAAAL,KAAAF,EAAA,kBAAA,QAAAG,IAAA,QAAA,oBAAAA,IAAA,SAAA,qBAAA,sBAMO,SAAAE,EAEI,SAAAL,EACV,SAAAC,GAAAA,EAAA,IAAA,CAAAO,EAAAC,IAIIF,EAAA,SAAA,CAAA,MAAAC,EAAA,MAAA,SAAAA,EAAA,KAAA,EAAAC,CAAA,CAGE,CAEH,CAAA,CAGT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}